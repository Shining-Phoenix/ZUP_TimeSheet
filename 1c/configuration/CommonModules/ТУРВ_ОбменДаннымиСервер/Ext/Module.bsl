#Область ПрограммныйИнтерфейс

Функция Логин(НастройкиСервиса) Экспорт
	
	РесурсНаСервере = "/api/v1/auth/signIn";	
	Токен = "";
		
    СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, "");
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	ИД = Строка(Новый УникальныйИдентификатор());
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	
	ТелоЗапроса = СтрШаблон("{""email"": ""%1"", ""password"": ""%2""}", 
							НастройкиСервиса.ЛогинПользователя, 
							НастройкиСервиса.ПарольПользователя);
							
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json; charset=utf-8");
		
    СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Соединение, 
										ИД, 
										ТУРВ_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										HTTPЗапрос,  
										"ТУРВ_ОбменДанными.Логин.ОписаниеЗапроса",
										"accessToken");
										

	Возврат СтруктураОтвета;
	
КонецФункции

Процедура ВыполнитьОбмен(СообщатьОбОшибках = Истина) Экспорт  
	
	НастройкиСервисаСтруктура = ТУРВ_ОбменДаннымиПовтИсп.НастройкиСервиса();
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(НастройкиСервисаСтруктура) Тогда
		Если СообщатьОбОшибках Тогда
			ТУРВ_РаботаСФункциямиКлиентСервер.СообщитьОбОшибках(НастройкиСервисаСтруктура);
		КонецЕсли;			
		Возврат;
	КонецЕсли;
	НастройкиСервиса = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(НастройкиСервисаСтруктура);
	
	ТокенСтруктура = ТУРВ_ОбменДаннымиСервер.Логин(НастройкиСервиса); 
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(ТокенСтруктура) Тогда
		Если СообщатьОбОшибках Тогда
			ТУРВ_РаботаСФункциямиКлиентСервер.СообщитьОбОшибках(ТокенСтруктура);
		КонецЕсли;	
		Возврат;
	КонецЕсли;
	Токен = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(ТокенСтруктура);
	
	РезультатОбмена = ТУРВ_РаботаСФункциямиКлиентСервер.СтруктураВозврата();
	
	ТУРВ_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
										ТУРВ_ОбменДаннымиПовтИсп.СобытияЛога().НачатПолныйОбмен, 
										ТУРВ_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
										ТУРВ_ЛогированиеСервер.ДанныеJSONОбъектСтрока(	ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ТУРВ_ЛогированиеСервер.ТекущаяДатаЛК(), 
																				"",
																				ТУРВ_ОбменДаннымиПовтИсп.ТипыОбъектов().Строка, 
																				""
																				"", 
																				"ТУРВ_ОбменДанными.ВыполнитьОбмен",));
	
	
	РезультатОбменСсылочнымиДанными = ВыполнитьОбменСсылочнымиДанными(НастройкиСервиса, Токен);
	ТУРВ_РаботаСФункциямиКлиентСервер.ОбъединитьОшибки(РезультатОбмена, РезультатОбменСсылочнымиДанными);
	
	//РезультатОбменПроизвольнымиДанными = ВыполнитьОбменПроизвольнымиДанными(НастройкиСервиса, Токен);
	//ТУРВ_РаботаСФункциямиКлиентСервер.ОбъединитьОшибки(РезультатОбмена, РезультатОбменПроизвольнымиДанными);
	//
	//РезультатПолученияДанных = ВыполнитьПолучениеДанных(НастройкиСервиса, Токен);
	//ТУРВ_РаботаСФункциямиКлиентСервер.ОбъединитьОшибки(РезультатОбмена, РезультатПолученияДанных);
	
	Если СообщатьОбОшибках И ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(РезультатОбмена) Тогда
		ТУРВ_РаботаСФункциямиКлиентСервер.СообщитьОбОшибках(РезультатОбмена);
	ИначеЕсли СообщатьОбОшибках Тогда
		
		Сообщение = Новый  СообщениеПользователю;
		Сообщение.Текст = "Обмен выполнен";
		Сообщение.Сообщить();
		
	КонецЕсли;	
	
	ТУРВ_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
										ТУРВ_ОбменДаннымиПовтИсп.СобытияЛога().ЗавершенПолныйОбмен, 
										ТУРВ_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
										ТУРВ_ЛогированиеСервер.ДанныеJSONОбъектСтрока(	ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ТУРВ_ЛогированиеСервер.ТекущаяДатаЛК(),
																				,
																				ТУРВ_ОбменДаннымиПовтИсп.ТипыОбъектов().Строка, 
																				"", 
																				"",
																				"ТУРВ_ОбменДанными.ВыполнитьОбмен",));

	
КонецПроцедуры

Функция ВыполнитьОбменСсылочнымиДанными(НастройкиСервиса, Токен)
	
	СтруктураВозврата = ТУРВ_РаботаСФункциямиКлиентСервер.СтруктураВозврата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТУРВ_ОчередьОбменаСсылочнымиДанными.Объект КАК Объект,
	               |	ТУРВ_ОчередьОбменаСсылочнымиДанными.ВидСобытия КАК ВидСобытия
	               |ИЗ
	               |	РегистрСведений.ТУРВ_ОчередьОбменаСсылочнымиДанными КАК ТУРВ_ОчередьОбменаСсылочнымиДанными
	               |ГДЕ
	               |	ТУРВ_ОчередьОбменаСсылочнымиДанными.Статус <> ЗНАЧЕНИЕ(Перечисление.ТУРВ_СтатусОбменаСЛК.Выполнен)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидСобытия,
	               |	Объект";   
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл	
			
		ИД = Строка(Новый УникальныйИдентификатор());
		ИмяМетаданных = Выборка.Объект.Метаданные().Имя;	
		Объект = СтрШаблон(	"{name: ""%1"", object: ""%2""}", 
							ИмяМетаданных, 
							Строка(Выборка.Объект.УникальныйИдентификатор()));
		
		ТУРВ_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
											ТУРВ_ОбменДаннымиПовтИсп.СобытияЛога().НачатаОбработкаЗадания, 
											ТУРВ_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
											ТУРВ_ЛогированиеСервер.ДанныеJSONОбъектJSON(ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ТУРВ_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ТУРВ_ОбменДаннымиПовтИсп.ТипыОбъектов().СпрС,
																				ИмяМетаданных, 
																				Объект, 
																				"ТУРВ_ОбменДанными.ВыполнитьОбменСсылочнымиДанными"));
		
		
		Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.Организации") Тогда
			
			Если Выборка.ВидСобытия = Перечисления.ТУРВ_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ТУРВ_ОбменДаннымиСервер.ДобавитьОрганизацию(НастройкиСервиса, Токен, ИД, Выборка.Объект);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ТУРВ_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ТУРВ_ОбменДаннымиСервер.ОбновитьОрганизацию(НастройкиСервиса, Токен, ИД, Выборка.Объект);		
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			
			Если Выборка.ВидСобытия = Перечисления.ТУРВ_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ТУРВ_ОбменДаннымиСервер.ДобавитьПодразделение(НастройкиСервиса, Токен, ИД, Выборка.Объект);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ТУРВ_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ТУРВ_ОбменДаннымиСервер.ОбновитьПодразделение(НастройкиСервиса, Токен, ИД, Выборка.Объект);		
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.Должности") Тогда
			
			Если Выборка.ВидСобытия = Перечисления.ТУРВ_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ТУРВ_ОбменДаннымиСервер.ДобавитьДолжность(НастройкиСервиса, Токен, ИД, Выборка.Объект);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ТУРВ_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ТУРВ_ОбменДаннымиСервер.ОбновитьДолжность(НастройкиСервиса, Токен, ИД, Выборка.Объект);		
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ВидыИспользованияРабочегоВремени") Тогда
			
			Если Выборка.ВидСобытия = Перечисления.ТУРВ_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ТУРВ_ОбменДаннымиСервер.ДобавитьВидИспользованияРабочегоВремени(НастройкиСервиса, Токен, ИД, Выборка.Объект);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ТУРВ_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ТУРВ_ОбменДаннымиСервер.ОбновитьВидИспользованияРабочегоВремени(НастройкиСервиса, Токен, ИД, Выборка.Объект);		
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ГрафикиРаботыСотрудников") Тогда
			
			Если Выборка.ВидСобытия = Перечисления.ТУРВ_ВидыСобытийСОбъектамиЛК.Добавление Тогда
				Результат = ТУРВ_ОбменДаннымиСервер.ДобавитьГрафикРаботы(НастройкиСервиса, Токен, ИД, Выборка.Объект);
			ИначеЕсли Выборка.ВидСобытия = Перечисления.ТУРВ_ВидыСобытийСОбъектамиЛК.Изменение Тогда
				Результат = ТУРВ_ОбменДаннымиСервер.ОбновитьГрафикРаботы(НастройкиСервиса, Токен, ИД, Выборка.Объект);		
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат <> Неопределено И Не ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(Результат) Тогда
			РегистрыСведений.ТУРВ_ОчередьОбменаСсылочнымиДанными.ЗарегистрироватьУспехОбработки(ИД, Выборка.Объект, Выборка.ВидСобытия);
		ИначеЕсли Результат <> Неопределено  Тогда
			
			РегистрыСведений.ТУРВ_ОчередьОбменаСсылочнымиДанными.ЗарегистрироватьОшибкуОбработки(ИД, Выборка.Объект, Выборка.ВидСобытия, 
																								  "ТУРВ_ОбменДанными.ВыполнитьОбменСсылочнымиДанными",
																								  ТУРВ_РаботаСФункциямиКлиентСервер.ОшибкиСтрокой(Результат));
			ТУРВ_РаботаСФункциямиКлиентСервер.ОбъединитьОшибки(СтруктураВозврата, Результат); 
			
		КонецЕсли;
		
		ТУРВ_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
											ТУРВ_ОбменДаннымиПовтИсп.СобытияЛога().ЗавершенаОбработкаЗадания, 
											ТУРВ_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
											ТУРВ_ЛогированиеСервер.ДанныеJSONОбъектJSON(ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ТУРВ_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ТУРВ_ОбменДаннымиПовтИсп.ТипыОбъектов().СпрС, 
																				ИмяМетаданных,
																				Объект, 
																				"ТУРВ_ОбменДанными.ВыполнитьОбменСсылочнымиДанными"));

		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции	

Функция ВыполнитьОбменПроизвольнымиДанными(НастройкиСервиса, Токен)
	
	СтруктураВозврата = ТУРВ_РаботаСФункциямиКлиентСервер.СтруктураВозврата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	ТУРВ_ОчередьОбменаПроизвольнымиДанными.ТипОбъкта КАК ТипОбъкта,
					|	ТУРВ_ОчередьОбменаПроизвольнымиДанными.ИмяОбъекта КАК ИмяОбъекта,
					|	ТУРВ_ОчередьОбменаПроизвольнымиДанными.ВидСобытия КАК ВидСобытия,
					|	ТУРВ_ОчередьОбменаПроизвольнымиДанными.ХЭШ КАК ХЭШ,
					|	ТУРВ_ОчередьОбменаПроизвольнымиДанными.Данные КАК Данные,
					|	ТУРВ_ОчередьОбменаПроизвольнымиДанными.ДатаСобытия КАК ДатаСобытия
					|ИЗ
					|	РегистрСведений.ТУРВ_ОчередьОбменаПроизвольнымиДанными КАК ТУРВ_ОчередьОбменаПроизвольнымиДанными
					|ГДЕ
					|	ТУРВ_ОчередьОбменаПроизвольнымиДанными.Статус <> ЗНАЧЕНИЕ(Перечисление.ТУРВ_СтатусОбменаСЛК.Выполнен)
					|
					|УПОРЯДОЧИТЬ ПО
					|	ДатаСобытия,
					|	ИмяОбъекта,
					|	ВидСобытия,
					|	ТипОбъкта,
					|	ХЭШ";   
	                                   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИД = Строка(Новый УникальныйИдентификатор());
		
		ТУРВ_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
											ТУРВ_ОбменДаннымиПовтИсп.СобытияЛога().НачатаОбработкаЗадания, 
											ТУРВ_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
											ТУРВ_ЛогированиеСервер.ДанныеJSONОбъектJSON(ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ТУРВ_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				Выборка.ТипОбъкта,
																				Выборка.ИмяОбъекта, 
																				Выборка.Данные, 
																				"ТУРВ_ОбменДанными.ВыполнитьОбменПроизвольнымиДанными"));

		Если Выборка.ТипОбъкта = ТУРВ_ОбменДаннымиПовтИсп.ТипыОбъектов().РСНЗ Тогда
	
			Если Выборка.ИмяОбъекта = "КадроваяИсторияСотрудников" Тогда
				
				Если Выборка.ВидСобытия = Перечисления.ТУРВ_ВидыСобытийСОбъектамиЛК.Добавление Тогда
					
					ДанныеСтрутура = ТУРВ_РаботаСJSONСервер.ЧтениеJSON(Выборка.Данные);
					СотрудникСсылка      = ДанныеСтрутура.Сотрудник;
					
					Результат = ТУРВ_ОбменДаннымиСервер.СоздатьОбновитьКадровойИсториюСотрудника(ИД, НастройкиСервиса, Токен, СотрудникСсылка);
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		                                                                   
		Если Результат <> Неопределено И Не ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(Результат) Тогда
			РегистрыСведений.ТУРВ_ОчередьОбменаПроизвольнымиДанными.ЗарегистрироватьУспехОбработки(ИД, 
																									Выборка.ТипОбъкта, 
																									Выборка.ИмяОбъекта, 
																									Выборка.ВидСобытия, 
																									Выборка.ХЭШ, 
																									Выборка.Данные);
		ИначеЕсли Результат <> Неопределено  Тогда

			РегистрыСведений.ТУРВ_ОчередьОбменаПроизвольнымиДанными.ЗарегистрироватьОшибкуОбработки(ИД, 
																									Выборка.ТипОбъкта, 
																									Выборка.ИмяОбъекта, 
																									Выборка.ВидСобытия, 
																									Выборка.ХЭШ, 
																									Выборка.Данные, 
																									"ТУРВ_ОбменДанными.ВыполнитьОбменПроизвольнымиДанными",
																									ТУРВ_РаботаСФункциямиКлиентСервер.ОшибкиСтрокой(Результат));
			ТУРВ_РаботаСФункциямиКлиентСервер.ОбъединитьОшибки(СтруктураВозврата, Результат); 
			
		КонецЕсли;
		
		ТУРВ_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
											ТУРВ_ОбменДаннымиПовтИсп.СобытияЛога().ЗавершенаОбработкаЗадания, 
											ТУРВ_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
											ТУРВ_ЛогированиеСервер.ДанныеJSONОбъектJSON(ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ТУРВ_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				Выборка.ТипОбъкта,
																				Выборка.ИмяОбъекта, 
																				Выборка.Данные, 
																				"ТУРВ_ОбменДанными.ВыполнитьОбменПроизвольнымиДанными"));

	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции	

#Область НСИ

#Область Организации

Функция ДобавитьОрганизацию(НастройкиСервиса, Токен, ИД, ОрганизацияСсылка) Экспорт
	
	РесурсНаСервере = "/api/v1/organization";
	
	СтруктураВозврата = ПодготовитьHTTPЗапрос(ИД, НастройкиСервиса, РесурсНаСервере, Токен);
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Результат = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияСсылка, "НаименованиеСокращенное");
	
	Структура = Новый Структура;
	Структура.Вставить("pk",             ОрганизацияСсылка);
	Структура.Вставить("name", 			 РеквизитыОрганизации.НаименованиеСокращенное);
	ТелоЗапроса = ТУРВ_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);

	Результат.HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Результат.Соединение, 
										ИД, 
										ТУРВ_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										Результат.HTTPЗапрос,  
										"ТУРВ_ОбменДанными.ДобавитьОрганизацию.ОписаниеЗапроса",
										"");
										
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ОбновитьОрганизацию(НастройкиСервиса, Токен, ИД, ОрганизацияСсылка) Экспорт
	
	РесурсНаСервере = "/api/v1/organization";
	
	СтруктураВозврата = ПодготовитьHTTPЗапрос(ИД, НастройкиСервиса, РесурсНаСервере, Токен);
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Результат = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияСсылка, "НаименованиеСокращенное");
	
	Структура = Новый Структура;
	Структура.Вставить("pk",             ОрганизацияСсылка);
	Структура.Вставить("name", 			 РеквизитыОрганизации.НаименованиеСокращенное);
	ТелоЗапроса = ТУРВ_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);

	Результат.HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Результат.Соединение, 
										ИД, 
										ТУРВ_ОбменДаннымиПовтИсп.МетодыЗапроса().ПУТ, 
										Результат.HTTPЗапрос,  
										"ТУРВ_ОбменДанными.ОбновитьОрганизацию.ОписаниеЗапроса",
										"");
										
	Возврат СтруктураОтвета;

	
КонецФункции

#КонецОбласти

#Область Подразделения

Функция ДобавитьПодразделение(НастройкиСервиса, Токен, ИД, ПодразделениеСсылка) Экспорт
	
	РесурсНаСервере = "/api/v1/subdivision";
	
	СтруктураВозврата = ПодготовитьHTTPЗапрос(ИД, НастройкиСервиса, РесурсНаСервере, Токен);
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Результат = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодразделениеСсылка, "Наименование, Код, Родитель, Владелец");
	
	Структура = Новый Структура;
	Структура.Вставить("pk",             	ПодразделениеСсылка);
	Структура.Вставить("name", 			 	РеквизитыОрганизации.Наименование);
	Структура.Вставить("code", 			 	РеквизитыОрганизации.Код);
	Структура.Вставить("parent_pk", 		РеквизитыОрганизации.Родитель);
	Структура.Вставить("organization_pk", 	РеквизитыОрганизации.Владелец);
	
	ТелоЗапроса = ТУРВ_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);

	Результат.HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Результат.Соединение, 
										ИД, 
										ТУРВ_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										Результат.HTTPЗапрос,  
										"ТУРВ_ОбменДанными.ДобавитьПодразделение.ОписаниеЗапроса",
										"");
										
	Возврат СтруктураОтвета;

	
КонецФункции

Функция ОбновитьПодразделение(НастройкиСервиса, Токен, ИД, ПодразделениеСсылка) Экспорт
	
	РесурсНаСервере = "/api/v1/subdivision";
	
	СтруктураВозврата = ПодготовитьHTTPЗапрос(ИД, НастройкиСервиса, РесурсНаСервере, Токен);
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Результат = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодразделениеСсылка, "Наименование, Код, Родитель, Владелец");
	
	Структура = Новый Структура;
	Структура.Вставить("pk",             	ПодразделениеСсылка);
	Структура.Вставить("name", 			 	РеквизитыОрганизации.Наименование);
	Структура.Вставить("code", 			 	РеквизитыОрганизации.Код);
	Структура.Вставить("parent_pk", 		РеквизитыОрганизации.Родитель);
	Структура.Вставить("organization_pk", 	РеквизитыОрганизации.Владелец);
	
	ТелоЗапроса = ТУРВ_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);

	Результат.HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Результат.Соединение, 
										ИД, 
										ТУРВ_ОбменДаннымиПовтИсп.МетодыЗапроса().ПУТ, 
										Результат.HTTPЗапрос,  
										"ТУРВ_ОбменДанными.ОбновитьПодразделение.ОписаниеЗапроса",
										"");
										
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область Должности

Функция ДобавитьДолжность(НастройкиСервиса, Токен, ИД, ДолжностьСсылка) Экспорт 
	
	РесурсНаСервере = "/api/v1/position"; 
	
	СтруктураВозврата = ПодготовитьHTTPЗапрос(ИД, НастройкиСервиса, РесурсНаСервере, Токен);
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Результат = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДолжностьСсылка, "Наименование");
	
	Структура = Новый Структура;
	Структура.Вставить("pk",             	ДолжностьСсылка);
	Структура.Вставить("name", 			 	РеквизитыОрганизации.Наименование);
	
	ТелоЗапроса = ТУРВ_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	Результат.HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);

	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Результат.Соединение, 
										ИД, 
										ТУРВ_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										Результат.HTTPЗапрос,  
										"ТУРВ_ОбменДанными.ДобавитьДолжность.ОписаниеЗапроса",
										"");
	
		
	
	Возврат СтруктураОтвета;	
	
КонецФункции	

Функция ОбновитьДолжность(НастройкиСервиса, Токен, ИД, ДолжностьСсылка) Экспорт 
	
	РесурсНаСервере = "/api/v1/position"; 
	
	СтруктураВозврата = ПодготовитьHTTPЗапрос(ИД, НастройкиСервиса, РесурсНаСервере, Токен);
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Результат = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДолжностьСсылка, "Наименование");
	
	Структура = Новый Структура;
	Структура.Вставить("pk",             	ДолжностьСсылка);
	Структура.Вставить("name", 			 	РеквизитыОрганизации.Наименование);  
	
	ТелоЗапроса = ТУРВ_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	Результат.HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);	

	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Результат.Соединение, 
										ИД, 
										ТУРВ_ОбменДаннымиПовтИсп.МетодыЗапроса().ПУТ, 
										Результат.HTTPЗапрос,  
										"ТУРВ_ОбменДанными.ОбновитьДолжность.ОписаниеЗапроса",
										"");
	
		
	
	Возврат СтруктураОтвета;	
	
КонецФункции

#КонецОбласти

#Область ВидыИспользованияРабочегоВремени

Функция ДобавитьВидИспользованияРабочегоВремени(НастройкиСервиса, Токен, ИД, ВидИспользованияРабочегоВремениСсылка) Экспорт 
	
	РесурсНаСервере = "/api/v1/types-of-time"; 

	СтруктураВозврата = ПодготовитьHTTPЗапрос(ИД, НастройкиСервиса, РесурсНаСервере, Токен);
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Результат = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
			
	Запрос = Новый Запрос;
	Запрос.Текст = " ВЫБРАТЬ
					|	ВидыИспользованияРабочегоВремени.Ссылка КАК Ссылка,			
					|	ВидыИспользованияРабочегоВремени.ПометкаУдаления КАК ПометкаУдаления,
					|	ВидыИспользованияРабочегоВремени.Наименование КАК Наименование,
					|	ВидыИспользованияРабочегоВремени.БуквенныйКод КАК БуквенныйКод,
					|	ВидыИспользованияРабочегоВремени.ОсновноеВремя КАК ОсновноеВремя,
					|	ВидыИспользованияРабочегоВремени.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
					|ИЗ
					|	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
					|ГДЕ ВидыИспользованияРабочегоВремени.Ссылка = &Ссылка
					|";
	
	Запрос.Параметры.Вставить("Ссылка", ВидИспользованияРабочегоВремениСсылка); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("name",  			Выборка.Наименование);
	Структура.Вставить("pk",      			ВидИспользованияРабочегоВремениСсылка);
	Структура.Вставить("deleted",  	 		Выборка.ПометкаУдаления);
	Структура.Вставить("time_code",  	 	Выборка.БуквенныйКод);
	Структура.Вставить("general_time_pk", 	Выборка.ОсновноеВремя);
	Структура.Вставить("predefined_name", 	Выборка.ИмяПредопределенныхДанных);
	ТелоЗапроса = ТУРВ_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	Результат.HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Результат.Соединение, 
										ИД, 
										ТУРВ_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										Результат.HTTPЗапрос,  
										"ТУРВ_ОбменДанными.ДобавитьВидИспользованияРабочегоВремени.ОписаниеЗапроса",
										"");
										
	Возврат СтруктураОтвета;

КонецФункции

Функция ОбновитьВидИспользованияРабочегоВремени(НастройкиСервиса, Токен, ИД, ВидИспользованияРабочегоВремениСсылка) Экспорт 
	
	РесурсНаСервере = "/api/v1/types-of-time"; 
	
	СтруктураВозврата = ПодготовитьHTTPЗапрос(ИД, НастройкиСервиса, РесурсНаСервере, Токен);
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Результат = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
			
	Запрос = Новый Запрос;
	Запрос.Текст = " ВЫБРАТЬ
					|	ВидыИспользованияРабочегоВремени.Ссылка КАК Ссылка,			
					|	ВидыИспользованияРабочегоВремени.ПометкаУдаления КАК ПометкаУдаления,
					|	ВидыИспользованияРабочегоВремени.Наименование КАК Наименование,
					|	ВидыИспользованияРабочегоВремени.БуквенныйКод КАК БуквенныйКод,
					|	ВидыИспользованияРабочегоВремени.ОсновноеВремя КАК ОсновноеВремя,
					|	ВидыИспользованияРабочегоВремени.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
					|ИЗ
					|	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
					|ГДЕ ВидыИспользованияРабочегоВремени.Ссылка = &Ссылка
					|";
	
	Запрос.Параметры.Вставить("Ссылка", ВидИспользованияРабочегоВремениСсылка); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("name",  			Выборка.Наименование);
	Структура.Вставить("pk",      			ВидИспользованияРабочегоВремениСсылка);
	Структура.Вставить("deleted",  	 		Выборка.ПометкаУдаления);
	Структура.Вставить("time_code",  	 	Выборка.БуквенныйКод);
	Структура.Вставить("general_time_pk", 	Выборка.ОсновноеВремя);
	Структура.Вставить("predefined_name", 	Выборка.ИмяПредопределенныхДанных);
	ТелоЗапроса = ТУРВ_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	Результат.HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Результат.Соединение, 
										ИД, 
										ТУРВ_ОбменДаннымиПовтИсп.МетодыЗапроса().ПУТ, 
										Результат.HTTPЗапрос,  
										"ТУРВ_ОбменДанными.ОбновитьВидИспользованияРабочегоВремени.ОписаниеЗапроса",
										"");
										
	Возврат СтруктураОтвета;

КонецФункции

#КонецОбласти

#Область ГрафикиРаботы

Функция ДобавитьГрафикРаботы(НастройкиСервиса, Токен, ИД, ГрафикРаботыСсылка) Экспорт 
	
	РесурсНаСервере = "/api/v1/work-schedules"; 

	СтруктураВозврата = ПодготовитьHTTPЗапрос(ИД, НастройкиСервиса, РесурсНаСервере, Токен);
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Результат = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
			
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГрафикРаботыСсылка, "Наименование, ПометкаУдаления");	
	
	Структура = Новый Структура;
	Структура.Вставить("pk",  	  ГрафикРаботыСсылка);
	Структура.Вставить("name",    Реквизиты.Наименование);
	Структура.Вставить("deleted", Реквизиты.ПометкаУдаления);
	ТелоЗапроса = ТУРВ_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	Результат.HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Результат.Соединение, 
										ИД, 
										ТУРВ_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										Результат.HTTPЗапрос,  
										"ТУРВ_ОбменДанными.ДобавитьГрафикРаботы.ОписаниеЗапроса",
										"");
										
	Возврат СтруктураОтвета;

КонецФункции

Функция ОбновитьГрафикРаботы(НастройкиСервиса, Токен, ИД, ГрафикРаботыСсылка) Экспорт 
	
	РесурсНаСервере = "/api/v1/work-schedules"; 

	СтруктураВозврата = ПодготовитьHTTPЗапрос(ИД, НастройкиСервиса, РесурсНаСервере, Токен);
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Результат = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
			
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГрафикРаботыСсылка, "Наименование, ПометкаУдаления");	
	
	Структура = Новый Структура;
	Структура.Вставить("pk",  	  ГрафикРаботыСсылка);
	Структура.Вставить("name",    Реквизиты.Наименование);
	Структура.Вставить("deleted", Реквизиты.ПометкаУдаления);
	ТелоЗапроса = ТУРВ_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	Результат.HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Результат.Соединение, 
										ИД, 
										ТУРВ_ОбменДаннымиПовтИсп.МетодыЗапроса().ПУТ, 
										Результат.HTTPЗапрос,  
										"ТУРВ_ОбменДанными.ОбновитьГрафикРаботы.ОписаниеЗапроса",
										"");
										
	Возврат СтруктураОтвета;

КонецФункции

#КонецОбласти

#Область Пользователи

Функция СоздатьПользователя(НастройкиСервиса, Токен, ФизЛицоСсылка, ЛогинПользователя, ПарольПользователя) Экспорт 
	
	РесурсНаСервере = "/api/v1/auth/signUp"; 
	
	СтруктураВозврата = ПодготовитьHTTPЗапрос("", НастройкиСервиса, РесурсНаСервере, Токен);
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Результат = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
					|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
					|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
					|ИЗ
					|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
					|ГДЕ
					|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизЛицоСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("firstName",     Выборка.Имя); 
	Структура.Вставить("lastName",      Выборка.Фамилия);
	Структура.Вставить("patronymic",    Выборка.Отчество);
	Структура.Вставить("id_1c",         ФизЛицоСсылка);
	Структура.Вставить("email",         ЛогинПользователя);
	Структура.Вставить("password", ПарольПользователя);
	ТелоЗапроса = ТУРВ_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	Результат.HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
		
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Результат.Соединение, 
										"", 
										ТУРВ_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										Результат.HTTPЗапрос,  
										"ТУРВ_ОбменДанными.СоздатьПользователя.ОписаниеЗапроса",
										"pk");
										
	Если Не ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураОтвета) Тогда									
		
		МенеджерЗаписи                = РегистрыСведений.ТУРВ_Пользователи.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ФизическоеЛицо = ФизЛицоСсылка;
		МенеджерЗаписи.id             = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(СтруктураОтвета);
		МенеджерЗаписи.Логин          = ЛогинПользователя;
		МенеджерЗаписи.Пароль         = ПарольПользователя;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;	
	
КонецФункции	

#КонецОбласти

#Область Сотрудники

Функция СоздатьСотрудника(НастройкиСервиса, Токен, ИД, СотрудникСсылка) Экспорт 
	
	РесурсНаСервере = "/api/v1/employee"; 

	СтруктураВозврата = ПодготовитьHTTPЗапрос(ИД, НастройкиСервиса, РесурсНаСервере, Токен);
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Результат = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
					|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
					|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество,
					|	ТУРВ_Пользователи.id КАК id,
					|	ТУРВ_Пользователи.Логин КАК Логин,
					|	ТУРВ_Пользователи.Пароль КАК Пароль,
					|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
					|	Сотрудники.Код КАК Код,
					|	Сотрудники.Наименование КАК Наименование,					
					|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
					|	Сотрудники.ГоловнойСотрудник КАК ГоловнойСотрудник
					|ИЗ
					|	Справочник.Сотрудники КАК Сотрудники
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
					|			ПО Сотрудники.ФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
					|  		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТУРВ_Пользователи КАК ТУРВ_Пользователи
					|			ПО ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = ТУРВ_Пользователи.ФизическоеЛицо		
					|ГДЕ
					|	Сотрудники.Ссылка = &СотрудникСсылка";
	
	Запрос.УстановитьПараметр("СотрудникСсылка", СотрудникСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("pk",         		СотрудникСсылка);
	Структура.Вставить("user_id_1c", 		Выборка.ФизическоеЛицо);
	Структура.Вставить("code", 				Выборка.Код);
	Структура.Вставить("name", 				Выборка.Наименование);	
	Структура.Вставить("organization_pk", 	Выборка.ГоловнаяОрганизация);
	Структура.Вставить("head_employee_pk", 	Выборка.ГоловнойСотрудник);
	ТелоЗапроса = ТУРВ_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	Результат.HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);

	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Результат.Соединение, 
										ИД, 
										ТУРВ_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										Результат.HTTPЗапрос,  
										"ТУРВ_ОбменДанными.СоздатьСотрудника.ОписаниеЗапроса",
										"");
										
	Возврат СтруктураОтвета;	
	
КонецФункции

Функция ОбновитьСотрудника(НастройкиСервиса, Токен, ИД, СотрудникСсылка) Экспорт 
	
	РесурсНаСервере = "/api/v1/employee"; 

	СтруктураВозврата = ПодготовитьHTTPЗапрос(ИД, НастройкиСервиса, РесурсНаСервере, Токен);
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Результат = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
					|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
					|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество,
					|	ТУРВ_ПользователиЛК.id КАК id,
					|	ТУРВ_ПользователиЛК.Логин КАК Логин,
					|	ТУРВ_ПользователиЛК.Пароль КАК Пароль,
					|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
					|	Сотрудники.Код КАК Код,
					|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
					|	Сотрудники.ГоловнойСотрудник КАК ГоловнойСотрудник
					|ИЗ
					|	Справочник.Сотрудники КАК Сотрудники
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
					|			ПО Сотрудники.ФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
					|  		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТУРВ_ПользователиЛК КАК ТУРВ_ПользователиЛК
					|			ПО ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = ТУРВ_ПользователиЛК.ФизическоеЛицо		
					|ГДЕ
					|	Сотрудники.Ссылка = &СотрудникСсылка";
	
	Запрос.УстановитьПараметр("СотрудникСсылка", СотрудникСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Структура = Новый Структура;
	Структура.Вставить("pk",         СотрудникСсылка);
	Структура.Вставить("user_id_1c", Выборка.ФизическоеЛицо);
	Структура.Вставить("code", Выборка.ФизическоеЛицо);
	Структура.Вставить("organization_pk", Выборка.ГоловнаяОрганизация);
	Структура.Вставить("head_employee_pk", Выборка.ГоловнойСотрудник);
	ТелоЗапроса = ТУРВ_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
	
	Результат.HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);

	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Результат.Соединение, 
										ИД, 
										ТУРВ_ОбменДаннымиПовтИсп.МетодыЗапроса().ПУТ, 
										Результат.HTTPЗапрос,  
										"ТУРВ_ОбменДанными.ОбновитьСотрудника.ОписаниеЗапроса",
										"");
										
	Возврат СтруктураОтвета;	
	
КонецФункции	

#КонецОбласти

#КонецОбласти

#Область КадроваяИстория

Функция СоздатьОбновитьКадровойИсториюСотрудника(ИД, НастройкиСервиса, Токен, СотрудникСсылка) Экспорт 
	
	РесурсНаСервере = "/api/v1/employee-workplace-history"; 

	СтруктураВозврата = ПодготовитьHTTPЗапрос(ИД, НастройкиСервиса, РесурсНаСервере, Токен);
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Результат = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
						
	ЗапросКадровойИстории = Новый Запрос;
	ЗапросКадровойИстории.Текст = "ВЫБРАТЬ
									|	КадроваяИсторияСотрудниковИнтервальный.ДатаНачала КАК ДатаНачала,
									|	КадроваяИсторияСотрудниковИнтервальный.Должность КАК Должность,
									|	КадроваяИсторияСотрудниковИнтервальный.Подразделение КАК Подразделение
									|ИЗ
									|	РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
									|ГДЕ
									|	КадроваяИсторияСотрудниковИнтервальный.Сотрудник = &Сотрудник";
	ЗапросКадровойИстории.УстановитьПараметр("Сотрудник", СотрудникСсылка);
	
	СтруктураРабочихМест = Новый Структура;
	МассивРабочихМест = Новый Массив;
	
	ВыборкаКадровойИстории = ЗапросКадровойИстории.Выполнить().Выбрать();
	Пока ВыборкаКадровойИстории.Следующий() Цикл
		СтруктураРабочегоМеста = Новый Структура;
		СтруктураРабочегоМеста.Вставить("position_pk",    ВыборкаКадровойИстории.Должность);
		СтруктураРабочегоМеста.Вставить("subdivision_pk", ВыборкаКадровойИстории.Подразделение);
		СтруктураРабочегоМеста.Вставить("date_from",      ВыборкаКадровойИстории.ДатаНачала);
		МассивРабочихМест.Добавить(СтруктураРабочегоМеста);
	КонецЦикла;

		
	Структура = Новый Структура;
	Структура.Вставить("employee_pk",    СотрудникСсылка);
	Структура.Вставить("workplaces",     МассивРабочихМест);

	ТелоЗапроса = ТУРВ_РаботаСJSONСервер.ЗаписатьJSON_АП(Структура);
		
	Результат.HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
		
	СтруктураОтвета = ОтправитьЗапрос(	РесурсНаСервере, 
										Результат.Соединение, 
										ИД, 
										ТУРВ_ОбменДаннымиПовтИсп.МетодыЗапроса().ПОСТ, 
										Результат.HTTPЗапрос,  
										"ТУРВ_ОбменДанными.СоздатьОбновитьКадровойИсториюСотрудника.ОписаниеЗапроса",
										"");	
	
	Возврат СтруктураОтвета;	
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьСоединение(НастройкиСервиса, ИД)
	
	СтруктураВозврата = ТУРВ_РаботаСФункциямиКлиентСервер.СтруктураВозврата();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(НастройкиСервиса.АдресСервера, , , , );
		ТУРВ_РаботаСФункциямиКлиентСервер.ДобавитьРезультат(СтруктураВозврата, Соединение);
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		ТУРВ_РаботаСФункциямиКлиентСервер.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки);
		
		Объект = НастройкиСервиса.АдресСервера;
		ТУРВ_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Ошибка,
											ТУРВ_ОбменДаннымиПовтИсп.СобытияЛога().Логин, 
											ТУРВ_ОбменДаннымиПовтИсп.УровниСобытийЛога().Ошибка,
											ТУРВ_ЛогированиеСервер.ДанныеJSONОбъектСтрока(ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Ошибка, 
																				ТУРВ_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ТУРВ_ОбменДаннымиПовтИсп.ТипыОбъектов().Токен,
																				"",
																				Объект, 
																				"ТУРВ_ОбменДанными.СоздатьСоединение", 
																				ОписаниеОшибки()));
		
	КонецПопытки;

	Возврат СтруктураВозврата;
	
КонецФункции

Функция ОтправитьЗапрос(РесурсНаСервере, Соединение,  ИД, Метод, HTTPЗапрос, Трасса, ПолеОтвета)
	
	СтруктураВозврата = ТУРВ_РаботаСФункциямиКлиентСервер.СтруктураВозврата();
	Попытка	
		
		ОписаниеЗапроса = ТУРВ_ЛогированиеСервер.ОписаниеЗапроса(ИД, РесурсНаСервере, HTTPЗапрос);
		ТУРВ_ЛогированиеСервер.ДобавитьЗаписьВЛог(  ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Дебаг,
											ТУРВ_ОбменДаннымиПовтИсп.СобытияЛога().ОтправкаЗапроса, 
											ТУРВ_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация, 
											ТУРВ_ЛогированиеСервер.ДанныеJSONОбъектJSON(ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ТУРВ_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ТУРВ_ОбменДаннымиПовтИсп.ТипыОбъектов().ЗпП,
																				"Запрос",
																				ОписаниеЗапроса, 
																				Трасса));					 
		
		HTTPОтвет  = Соединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
		
		ОписаниеОтвета = ТУРВ_ЛогированиеСервер.ОписаниеОтвета(ИД, HTTPОтвет);
		ТУРВ_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Дебаг,
											ТУРВ_ОбменДаннымиПовтИсп.СобытияЛога().ПолучениеОтвета, 
											ТУРВ_ОбменДаннымиПовтИсп.УровниСобытийЛога().Информация,
											ТУРВ_ЛогированиеСервер.ДанныеJSONОбъектJSON(ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Дебаг, 
																				ТУРВ_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ТУРВ_ОбменДаннымиПовтИсп.ТипыОбъектов().ЗпП, 
																				"Ответ",
																				ОписаниеОтвета, 
																				Трасса));
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		ТУРВ_РаботаСФункциямиКлиентСервер.ДобавитьОшибку(СтруктураВозврата, ОписаниеОшибки);
		
		ТУРВ_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Ошибка,
											ТУРВ_ОбменДаннымиПовтИсп.СобытияЛога().ОшибкаПриОтправкеЗапроса, 
											ТУРВ_ОбменДаннымиПовтИсп.УровниСобытийЛога().Ошибка,			
											ТУРВ_ЛогированиеСервер.ДанныеJSONОбъектJSON(ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Ошибка, 
																				ТУРВ_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ТУРВ_ОбменДаннымиПовтИсп.ТипыОбъектов().Токен, 
																				"Запрос",
																				ОписаниеЗапроса, 
																				Трасса,
																				ОписаниеОшибки));
		Возврат СтруктураВозврата;
		
	КонецПопытки;

	СтруктураОтвета = РазобратьОтвет(   HTTPОтвет, ОписаниеОтвета, ИД, 
											ПолеОтвета, "ТУРВ_ОбменДанными.Логин", "Ошибка разбора ответа");
	Возврат СтруктураОтвета;

КонецФункции

Функция РазобратьОтвет(HTTPОтвет, ОписаниеОтвета, ИД, КлючОтвета, Трасса, СообщениеОбОшибке)
	
	СтруктураВозврата = ТУРВ_РаботаСФункциямиКлиентСервер.СтруктураВозврата();
	
	Если HTTPОтвет.КодСостояния > 299 Тогда
		
		ТУРВ_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Ошибка,
											ТУРВ_ОбменДаннымиПовтИсп.СобытияЛога().ОшибкаПриПолученииОтвета, 
											ТУРВ_ОбменДаннымиПовтИсп.УровниСобытийЛога().Ошибка,
											ТУРВ_ЛогированиеСервер.ДанныеJSONОбъектJSON(ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Ошибка, 
																				ТУРВ_ЛогированиеСервер.ТекущаяДатаЛК(),
																				ИД,
																				ТУРВ_ОбменДаннымиПовтИсп.ТипыОбъектов().ОЗ, 
																				"Ответ",
																				ОписаниеОтвета, 
																				Трасса));
		Сообщение = СтрШаблон("Код состояния: %1. %2.", HTTPОтвет.КодСостояния, 
														"Действие не выполнено");
																		
		ContentType = HTTPОтвет.Заголовки.Получить("Content-Type");																		
		
		Если ContentType = "application/json; charset=utf-8" Тогда
			
			ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			ТелоОтветаСоответствие = ТУРВ_РаботаСJSONСервер.ПрочитатьJSON_АП(ТелоОтвета);
			Message = ТелоОтветаСоответствие.Получить("message");
			Если Message <> Неопределено  Тогда
				Если ТипЗнч(Message) = Тип("Массив") Тогда
					
					Сообщение = "";
					
					Для Каждого СтрокаМассива Из Message Цикл 
						Сообщение = Сообщение + СтрШаблон("Код состояния: %1. %2.", HTTPОтвет.КодСостояния, 
																	СтрокаМассива) + ", ";
					КонецЦикла;	
																
					Сообщение = Лев(Сообщение, СтрДлина(Сообщение) - 2);											

				Иначе	
					Сообщение = СтрШаблон("Код состояния: %1. %2.", HTTPОтвет.КодСостояния, 
																	Message);
				КонецЕсли;
																
			КонецЕсли;
			
		КонецЕсли;																		
		
		ТУРВ_РаботаСФункциямиКлиентСервер.ДобавитьОшибку(СтруктураВозврата, Сообщение);
		Возврат СтруктураВозврата;
		
	КонецЕсли;

	Если КлючОтвета <> "" Тогда 	
		
		Результат = HTTPОтвет.ПолучитьТелоКакСтроку();
		РезультатОбъект = ТУРВ_РаботаСJSONСервер.ПрочитатьJSON_АП(Результат);
		
		Если РезультатОбъект.Получить(КлючОтвета) <> Неопределено Тогда
			ТУРВ_РаботаСФункциямиКлиентСервер.ДобавитьРезультат(СтруктураВозврата, РезультатОбъект[КлючОтвета]);
		Иначе
			
			ТУРВ_РаботаСФункциямиКлиентСервер.ДобавитьОшибку(СтруктураВозврата, СообщениеОбОшибке);	
			
			ТУРВ_ЛогированиеСервер.ДобавитьЗаписьВЛог(	ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Ошибка,
												ТУРВ_ОбменДаннымиПовтИсп.СобытияЛога().ОшибкаПриПолученииОтвета, 
												ТУРВ_ОбменДаннымиПовтИсп.УровниСобытийЛога().Ошибка,				
												ТУРВ_ЛогированиеСервер.ДанныеJSONОбъектJSON(ТУРВ_ОбменДаннымиПовтИсп.УровниЛога().Ошибка, 
																					ТУРВ_ЛогированиеСервер.ТекущаяДатаЛК(),
																					ИД,
																					ТУРВ_ОбменДаннымиПовтИсп.ТипыОбъектов().ОЗ,
																					"Ответ",
																					ОписаниеОтвета, 
																					Трасса),
																					СообщениеОбОшибке);
		КонецЕсли;

	КонецЕсли;																		

	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПодготовитьHTTPЗапрос(ИД, НастройкиСервиса, РесурсНаСервере, Токен)
	
	СтруктураВозврата = СоздатьСоединение(НастройкиСервиса, ИД);
	Если ТУРВ_РаботаСФункциямиКлиентСервер.Ошибка(СтруктураВозврата) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	Соединение = ТУРВ_РаботаСФункциямиКлиентСервер.Результат(СтруктураВозврата);
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере);
	HTTPЗапрос.Заголовки.Вставить("Content-type",  "application/json; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization", Токен);
	HTTPЗапрос.Заголовки.Вставить("ID",            ИД);
	
	ТУРВ_РаботаСФункциямиКлиентСервер.ДобавитьРезультат(СтруктураВозврата, Новый Структура("HTTPЗапрос, Соединение", HTTPЗапрос, Соединение));
	
	Возврат СтруктураВозврата;

КонецФункции

#КонецОбласти